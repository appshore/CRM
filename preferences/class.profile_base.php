<?php
 /***************************************************************************
 * Appshore                                                                 *
 * http://www.appshore.com                                                  *
 * This file written by Brice Michel  bmichel@appshore.com                  *
 * Copyright (C) 2004-2008 Brice Michel                                     *
 ***************************************************************************/
 
require_once ( APPSHORE_LIB.SEP.'class.base.php');

class preferences_profile_base extends lib_base{

    function __construct()
    {
    	$this->appTable 		= 'users';
    	$this->appRecordId		= 'user_id';    	
    	$this->appRecordName	= 'user_name'; 
    	$this->appOrderBy		= 'user_name';    	
    	$this->appAscDesc		= 'desc';    	    	   	
    	$this->appName 			= 'preferences_profile';
    	$this->appNameSingular	= 'preferences_profile';    	
    	$this->appLabel 		= 'My information';
    	$this->appLabelSingular = 'My information';    
    	$this->appXSL	 		= 'preferences.profile';
    	$this->appRole 			= 'preferences';

        parent::__construct();    	
    }

    function menus()
    {
		execMethod('preferences.base.menus');
	}
	
	// view one profile
    function start($args)
    {
    	return $this->view($args);		
    } 	

	// view one profile
    function search($args)
    {
    	return $this->view($args);		
    } 
	
	// view one profile
    function view( $args = null)
    {
    	// only the current user profile must be accessible
    	$args['user_id'] = $GLOBALS['appshore_data']['current_user']['user_id'];

		$result = parent::view( $args);	

		// Get rid of default app switcher
   		//$GLOBALS['appshore']->remove_xsl('lib.custom');

		return $result;	
    } 	

	
	// view one profile
    function edit( $args = null)
    {
    	// only the current user profile must be accessible
    	$args['user_id'] = $GLOBALS['appshore_data']['current_user']['user_id'];

		// the special case of full_name which occurs very frequently
		$args['full_name'] = setFullname($args['first_names'],$args['last_name']);
    	
		$result = parent::edit( $args);	

		// don't want to see list of users generated by default
		unset( $result['users']);

		return $result;	
    } 	

       		
	// edit or create one profile
    function changePassword()
    {
		$args = new safe_args();
		$args->set('key',			NOTSET,'any');
		$args->set('oldpassword',	NOTSET,'any');
		$args->set('newpassword1',	NOTSET,'any');
		$args->set('newpassword2',	NOTSET,'any');
		$args = $args->get(func_get_args()); 
		
        $GLOBALS['appshore']->add_xsl($this->appXSL);
        $GLOBALS['appshore']->add_xsl('lib.base');         
        $GLOBALS['appshore']->add_xsl('lib.edit');         
        $GLOBALS['appshore']->add_xsl('lib.form');         
        $this->menus();    
	
 		if ($args['key'] == 'Save')
 		{
			if ( $GLOBALS['appshore']->rbac->check($this->appRole, RBAC_USER_WRITE ))
			{
				// retrieve the selected record
				$user = getOneAssocArray( 'select password from users where user_id= "'.$GLOBALS['appshore_data']['current_user']['user_id'].'"');
				
				if( $user['password'] == md5( $args['oldpassword'] ) )
				{
					$update['user_id'] = $GLOBALS['appshore_data']['current_user']['user_id'];
					$update['password'] = md5($args['newpassword1']);
					$update['last_password_change'] = gmdate( 'Y-m-d  H:i:s', strtotime('now'));
					updateRow( 'users', 'user_id', $update);
				}
				else
					messagebox( 'Old password does not match, please try again', ERROR);
			}
			else
				messagebox( 'No access rights, contact your Appshore administrator', ERROR);
		} 

		unset($args);
		// Put context in XML to be processed by XSL
		$this->defaultSessionApp();
		$result['recordset'] = $_SESSION[$this->appName];		
		$result['profile']['user_id'] = $GLOBALS['appshore_data']['current_user']['user_id'];		
		$result['action'][$this->appName] = 'changePassword';	
		
        return $result;
    } 		
    
}
